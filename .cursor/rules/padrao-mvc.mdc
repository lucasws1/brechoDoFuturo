---
alwaysApply: true
---

# Padrão MVC no Projeto Brechó do Futuro

## Visão Geral

Este projeto segue o padrão MVC (Model-View-Controller) adaptado para uma API REST moderna, utilizando Node.js, TypeScript e Prisma ORM. O foco é a separação clara de responsabilidades, facilitando manutenção, testes e evolução do sistema.

## Estrutura de Pastas

```
backend/src/
  controllers/   # Lógica de entrada/saída HTTP, validação inicial, chamada de services
  services/      # Regras de negócio, orquestração, validações complexas
  models/        # Acesso direto ao banco (via Prisma), definição de entidades
  repositories/  # (Opcional) Abstração de queries complexas, reuso de acesso a dados
  routes/        # Definição das rotas Express
  middleware/    # Middlewares Express (auth, upload, etc)
  utils/         # Funções utilitárias (JWT, erros, etc)
  types/         # Tipos TypeScript compartilhados
```

## Responsabilidades

- **Controller**: Recebe requisições, valida dados básicos, chama o service e retorna resposta HTTP.
- **Service**: Implementa regras de negócio, validações, orquestra chamadas a models/repositories.
- **Model**: Responsável por interagir com o banco de dados (CRUD), usando Prisma. Evite lógica de negócio aqui.
- **Repository**: (Opcional) Centraliza queries complexas ou reutilizáveis.

## Boas Práticas Adotadas

- **Evite classes para models**: Prefira funções puras ou factories para manipulação de dados. Classes podem ser usadas apenas se realmente necessário (ex: métodos estáticos para queries), mas funções são mais simples, testáveis e idiomáticas em Node.js moderno.
- **Separation of Concerns**: Cada camada tem responsabilidade única. Não misture lógica de negócio no controller ou queries no service.
- **Validação**: Valide dados de entrada no controller (camada HTTP) e regras de negócio no service.
- **Tipagem**: Use TypeScript para garantir tipos em todas as camadas.
- **Retorno consistente**: Sempre retorne objetos padronizados (ex: { data, error, message }) nos controllers.

## Exemplo de Fluxo (Criação de Produto)

1. **Rota**: `POST /api/products`
2. **Controller**: Recebe req.body, valida campos obrigatórios, chama `ProductService.createProduct`
3. **Service**: Valida regras de negócio (ex: preço > 0, vendedor existe), chama model/repository
4. **Model**: Executa `prisma.product.create` com os dados
5. **Controller**: Retorna resposta HTTP adequada

```typescript
// Controller (resumido)
export const createProduct = async (req, res) => {
  // Validação básica
  // ...
  const result = await ProductService.createProduct(req.body);
  res.status(201).json(result);
};

// Service (resumido)
export async function createProduct(data: CreateProductData) {
  // Validações de negócio
  // ...
  return await ProductModel.create(data);
}

// Model (resumido, função pura)
export async function create(data: CreateProductData) {
  return prisma.product.create({ data });
}
```

## Observações sobre Rotas e Entidades

- As rotas seguem o padrão REST, agrupadas por recurso (`/api/products`, `/api/users`, `/api/orders`).
- As entidades e enums estão definidas em `entidades.json` e refletem o schema do banco (ver `prisma/schema.prisma`).
- Utilize os tipos definidos em `types/` para garantir consistência entre camadas.
- Validações de negócio (ex: status do produto, permissões de usuário) devem ser centralizadas nos services.

## Resumo

- **Não use classes para models, prefira funções puras**
- **Separe responsabilidades entre controller, service e model**
- **Valide dados na entrada e regras de negócio no service**
- **Use TypeScript e tipos compartilhados**
- **Retorne respostas padronizadas**

> Siga este padrão para garantir código limpo, testável e fácil de evoluir.

# Padrão MVC no Projeto Brechó do Futuro

## Visão Geral

Este projeto segue o padrão MVC (Model-View-Controller) adaptado para uma API REST moderna, utilizando Node.js, TypeScript e Prisma ORM. O foco é a separação clara de responsabilidades, facilitando manutenção, testes e evolução do sistema.

## Estrutura de Pastas

```
backend/src/
  controllers/   # Lógica de entrada/saída HTTP, validação inicial, chamada de services
  services/      # Regras de negócio, orquestração, validações complexas
  models/        # Acesso direto ao banco (via Prisma), definição de entidades
  repositories/  # (Opcional) Abstração de queries complexas, reuso de acesso a dados
  routes/        # Definição das rotas Express
  middleware/    # Middlewares Express (auth, upload, etc)
  utils/         # Funções utilitárias (JWT, erros, etc)
  types/         # Tipos TypeScript compartilhados
```

## Responsabilidades

- **Controller**: Recebe requisições, valida dados básicos, chama o service e retorna resposta HTTP.
- **Service**: Implementa regras de negócio, validações, orquestra chamadas a models/repositories.
- **Model**: Responsável por interagir com o banco de dados (CRUD), usando Prisma. Evite lógica de negócio aqui.
- **Repository**: (Opcional) Centraliza queries complexas ou reutilizáveis.

## Boas Práticas Adotadas

- **Evite classes para models**: Prefira funções puras ou factories para manipulação de dados. Classes podem ser usadas apenas se realmente necessário (ex: métodos estáticos para queries), mas funções são mais simples, testáveis e idiomáticas em Node.js moderno.
- **Separation of Concerns**: Cada camada tem responsabilidade única. Não misture lógica de negócio no controller ou queries no service.
- **Validação**: Valide dados de entrada no controller (camada HTTP) e regras de negócio no service.
- **Tipagem**: Use TypeScript para garantir tipos em todas as camadas.
- **Retorno consistente**: Sempre retorne objetos padronizados (ex: { data, error, message }) nos controllers.

## Exemplo de Fluxo (Criação de Produto)

1. **Rota**: `POST /api/products`
2. **Controller**: Recebe req.body, valida campos obrigatórios, chama `ProductService.createProduct`
3. **Service**: Valida regras de negócio (ex: preço > 0, vendedor existe), chama model/repository
4. **Model**: Executa `prisma.product.create` com os dados
5. **Controller**: Retorna resposta HTTP adequada

```typescript
// Controller (resumido)
export const createProduct = async (req, res) => {
  // Validação básica
  // ...
  const result = await ProductService.createProduct(req.body);
  res.status(201).json(result);
};

// Service (resumido)
export async function createProduct(data: CreateProductData) {
  // Validações de negócio
  // ...
  return await ProductModel.create(data);
}

// Model (resumido, função pura)
export async function create(data: CreateProductData) {
  return prisma.product.create({ data });
}
```

## Observações sobre Rotas e Entidades

- As rotas seguem o padrão REST, agrupadas por recurso (`/api/products`, `/api/users`, `/api/orders`).
- As entidades e enums estão definidas em `entidades.json` e refletem o schema do banco (ver `prisma/schema.prisma`).
- Utilize os tipos definidos em `types/` para garantir consistência entre camadas.
- Validações de negócio (ex: status do produto, permissões de usuário) devem ser centralizadas nos services.

## Resumo

- **Não use classes para models, prefira funções puras**
- **Separe responsabilidades entre controller, service e model**
- **Valide dados na entrada e regras de negócio no service**
- **Use TypeScript e tipos compartilhados**
- **Retorne respostas padronizadas**

> Siga este padrão para garantir código limpo, testável e fácil de evoluir.
