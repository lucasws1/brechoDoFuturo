Projeto brechoDoFuturo

- Backend ok

- Fluxo do frontend:

1. **Setup do projeto e arquitetura básica**

   - Configure o bundler (Vite, CRA, Next.js, etc.), define ESLint/Prettier, TypeScript (se for o caso) e estrutura de pastas (páginas, componentes, serviços, estilos).
   - Garanta a integração com o seu design token ou biblioteca de estilos (Tailwind, Styled Components, CSS Modules…).

      OK - MERN stack - frontend: Vite, prettier, TS, react, tailwind, zod, react router dom, react hook form, clsx (lista não exaustiva).
      OK - Estrutura das páginas: assets components config contexts hooks layouts lib pages routes styles types

2. **Componentes compartilhados (“Design System”)**

   - Comece criando os blocos mais atômicos: botão, input, cards de produto, tipografia e cores.
   - Assim, quando você for montar páginas, você já tem a base consistente.

      OK: componentes shadcn.

3. **Layout global (Header / Footer / Grid container)**

   - Crie o `Header` com logo, busca, botões de login/cadastro e carrinho.
   - Defina o `Footer` com links e contatos.
   - Implemente o container ou sistema de grid que vai receber as páginas filhas.
   
      OK -> header com pesquisa funcionando. 
      Home com paginação. 
      Contexto global para produtos implementado. 
      Footer ok (mock). 
      Estilo será aprimorado no final para não 'perder' tempo. Por enquanto estou focando em implementar as funções.

4. **Home page**

   - Use seus componentes atômicos e o layout global para montar a Home:  
     • Topbar de categorias  
     • Grid de produtos (card de produto + botão de “Adicionar”)  
     • Paginação ou “Carregar mais”  
     • Rodapé
     
     OK:
     - Topbar com pesquisa e categorias.
     - Grid com produtos.
     - Paginação ok (carregar mais e números por enquanto, ajustar no final).
     - Rodapé - design 'ok', aprimoramentos no final.
     - Vou trocar o botão 'adicionar' por 'menu do administrador' ou algo que o valha, sem urgencia nesse momento.
     
4.1. Páginas a serem criadas:
   - Home / Catálogo - ok
   - Página do Produto - ok, useProductById
   - Carrinho - CartContext - ok
   - Checkout
   - Login / Cadastro
   - Painel do Usuário (Meus Pedidos)
   - Painel do Admin (Gerenciar Produtos)
   - Página de Contato

5. **Navegação e estado**
   - Pense em como vai guardar o estado das categorias selecionadas, paginação e carrinho (Context API, Zustand, Redux, React Query…).

Sobre **menu vertical vs horizontal**:

- Vertical:  
  • Ótimo quando há muitas categorias ou hierarquias.  
  • Facilita a leitura dos itens e dá mais espaço para labels maiores.  
  • Pode ocupar bastante área em telas pequenas (mobile vai colapsar em um drawer).

- Horizontal:  
  • Ideal com poucas categorias (5–6 no máximo).  
  • Economiza altura da página, fica mais leve para mobile (pode rolar horizontal se precisar).  
  • Menos destacado para hierarquias profundas.

Dica: comece desenhando o menu, veja em diferentes tamanhos de tela e teste qual dá melhor usabilidade para seu público. Mas, estruturalmente, inicie pelos componentes globais (Header, Footer, Grid) antes de entrar no detalhe de cada página.
Ps.: não tenho nem sei usar o figma


Implementações futuras:
Carrinho:
   1. Verificação de Estoque: Impedir que o usuário adicione ao carrinho mais itens do que o disponível em estoque (product.stock). Isso seria uma pequena adição na função
      addToCart e updateQuantity dentro do CartContext.
   2. Mini-Carrinho (Popover): Ao invés de ir direto para a página, um clique (ou hover) no ícone do carrinho poderia abrir um pequeno resumo flutuante, com um link para a
      página completa.
   3. Campo de Cupom de Desconto: Adicionar um campo de input no resumo do pedido para aplicar descontos.
